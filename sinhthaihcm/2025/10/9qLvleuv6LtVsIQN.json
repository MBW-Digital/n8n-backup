{
  "active": false,
  "connections": {
    "Check Data Existence": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Data Exists": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Supplier in MobiworkDMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Supplier ERPNext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "IF Data Exists",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Write Logs To ERPNEXT1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supplier ERPNext": {
      "main": [
        [
          {
            "node": "Get List Address",
            "type": "main",
            "index": 0
          },
          {
            "node": "Unwrap Supplier to Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Supplier in MobiworkDMS": {
      "main": [
        [
          {
            "node": "Check Data Existence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "ERPNext Supplier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Address ERPNext": {
      "main": [
        [
          {
            "node": "Unwrap Address to Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Unwrap Address to Merge": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Unwrap Supplier to Merge": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ERPNext Supplier": {
      "main": [
        [
          {
            "node": "Get Supplier in MobiworkDMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Supplier in MobiworkDMS": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get List Address": {
      "main": [
        [
          {
            "node": "Address ERPNext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-19T10:26:07.927Z",
  "id": "9qLvleuv6LtVsIQN",
  "isArchived": false,
  "meta": null,
  "name": "[ERPNEXT] Đồng bộ dữ liệu Nhà cung cấp ERPNEXT -> DMS",
  "nodes": [
    {
      "parameters": {
        "functionCode": "// Helper chuẩn hóa để so sánh (upper-case + trim)\nconst N = s => (s ?? '').toString().trim().toUpperCase();\n\n// 1) Lấy dữ liệu\nconst dmsData = $node['Get Supplier in MobiworkDMS'].json?.data ?? [];\nconst erpMerged = $items(\"ERPNext Supplier\").map(i => i.json);;\n// 2) Tập mã đã có bên DMS\nconst dmsCodes = dmsData.map(u => (u.ma || '').toUpperCase());\n\n// 3) Lọc ra những item có trong ERP nhưng chưa có trong DMS\nreturn erpMerged\n  .filter(e => e.name && !dmsCodes.includes(N(e.name)))\n  .map(e => {\n    // build diaChi từ các field address sau merge\n    const parts = [\n      e.address_line1,\n      e.address_line2,\n      e.state,\n      e.city,\n      e.country,\n    ].filter(Boolean);\n\n    const diaChi = parts.join(\", \");\n    console.log(\"11test \", e)\n\n    return {\n      json: {\n        isExists: false,              // để IF node biết là chưa tồn tại\n        ma: e.name || null,           // mã ERP -> DMS.ma\n        ten: e.supplier_name || null, // tên hiển thị\n        dia_chi: diaChi || null,\n        so_dien_thoai: e.mobile_no || null,\n        ma_so_thue: e.tax_id || null,\n        stt: 1\n      }\n    };\n  });\n"
      },
      "name": "Check Data Existence",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -448,
        192
      ],
      "id": "a2eef00e-a07c-45e7-b038-5d448a28a236",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json['isExists'] }}",
              "operation": "=equal",
              "value2": true
            }
          ]
        }
      },
      "name": "IF Data Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        0,
        192
      ],
      "id": "0b23d213-a48f-47eb-9ca6-08b2f892a4c7",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2240,
        192
      ],
      "id": "d5574eef-7d5e-47e6-b455-28ca8a78989b",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        448,
        272
      ],
      "id": "e02bde92-0107-4d0f-a204-02aac66feed6",
      "name": "Wait",
      "webhookId": "3cc85c1d-76c2-4490-8ac7-7ab5722675dd"
    },
    {
      "parameters": {
        "doctype": "MBWNext Integration Logs",
        "operation": "create",
        "parameters": "={\n  \"sync_type\": \"Supplier\",\n  \"records_processed\": \"{{ $('Check Data Existence').all().length}}\",\n  \"status\": \"Success\",\n  \"log_message\": \"Đồng bộ dữ liệu Supplier thành công\"\n}"
      },
      "type": "CUSTOM.frappeCustom",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "595a907d-b614-446c-b26f-5a1501d53147",
      "name": "Write Logs To ERPNEXT1",
      "executeOnce": true,
      "credentials": {
        "FrappeCustomApi": {
          "id": "IHHWnJsrVIrcNQJg",
          "name": "pp.mbwnext.com"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {
          "reset": false
        }
      },
      "id": "e1dd6024-a041-4381-b6e5-151e64b5a038",
      "name": "SplitInBatches",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        -224,
        192
      ],
      "typeVersion": 2,
      "notesInFlow": true
    },
    {
      "parameters": {
        "doctype": "Supplier",
        "fields": "name,supplier_name,supplier_primary_address,mobile_no,tax_id"
      },
      "type": "CUSTOM.frappeCustom",
      "typeVersion": 1,
      "position": [
        -2016,
        192
      ],
      "id": "061a08eb-25e3-4c9b-ad34-d2371ad92439",
      "name": "Supplier ERPNext",
      "alwaysOutputData": true,
      "credentials": {
        "FrappeCustomApi": {
          "id": "IHHWnJsrVIrcNQJg",
          "name": "pp.mbwnext.com"
        }
      }
    },
    {
      "parameters": {
        "resource": "supplier",
        "additionalFields": {}
      },
      "type": "CUSTOM.mbwdmsCustom",
      "typeVersion": 1,
      "position": [
        -672,
        192
      ],
      "id": "cf74d338-4142-4637-923f-60be1dfc9441",
      "name": "Get Supplier in MobiworkDMS",
      "executeOnce": true,
      "credentials": {
        "MBWDMSCustomApi": {
          "id": "LMRCQovVC82iv3i6",
          "name": "MBW DMS DEV - pp.erpnext.com"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "=supplier_primary_address",
              "field2": "=address_id"
            }
          ]
        },
        "joinMode": "enrichInput1",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1120,
        192
      ],
      "id": "90bf1bb3-90cc-4c76-8a63-724c87020ee3",
      "name": "Merge"
    },
    {
      "parameters": {
        "doctype": "Address",
        "fields": "name, address_line1, address_line2, state, city, country",
        "filters": {
          "filter": [
            {
              "field": "=name",
              "operator": "in",
              "value": "={{ $json.names }}"
            }
          ]
        }
      },
      "type": "CUSTOM.frappeCustom",
      "typeVersion": 1,
      "position": [
        -1568,
        272
      ],
      "id": "d95c7256-8945-42f7-956e-cb941a8e3d2d",
      "name": "Address ERPNext",
      "alwaysOutputData": true,
      "credentials": {
        "FrappeCustomApi": {
          "id": "IHHWnJsrVIrcNQJg",
          "name": "pp.mbwnext.com"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.flatMap(item => {\n  if (Array.isArray(item.json)) {\n    return item.json.map(x => ({\n      json: {\n        ...x,\n        address_id: x.name,\n        name: undefined\n      }\n    }));\n  }\n  return {\n    json: {\n      ...item.json,\n      address_id: item.json.name,\n      name: undefined\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1344,
        272
      ],
      "id": "d12889e1-3777-4066-8b22-0515360c866a",
      "name": "Unwrap Address to Merge"
    },
    {
      "parameters": {
        "jsCode": "// Input có dạng [[{...}]], ta flatten thành [{...}]\nreturn items.flatMap(item => {\n  if (Array.isArray(item.json)) {\n    return item.json.map(x => ({ json: x }));\n  }\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1344,
        80
      ],
      "id": "be766ad0-09b4-44a7-afee-64d56cbf0744",
      "name": "Unwrap Supplier to Merge"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const s = item.json;\n  const a = {\n    address_line1: s.address_line1,\n    address_line2: s.address_line2,\n    state: s.state,\n    city: s.city,\n    pincode: s.pincode,\n    country: s.country,\n    phone: s.phone,\n    fax: s.fax,\n    email_id: s.email_id,\n  };\n\n  let addr = \"\";\n  if (a.address_line1) addr += a.address_line1 + \"<br>\";\n  if (a.address_line2) addr += a.address_line2 + \"<br>\";\n  if (a.state) addr += a.state + \"<br>\";\n  if (a.city) addr += a.city + \"<br>\";\n  if (a.country) addr += a.country + \"<br>\";\n\n  return {\n    json: {\n      ...s,\n      primary_address: addr || null\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        192
      ],
      "id": "0247875d-59ac-40f7-b763-c15df2d579c2",
      "name": "ERPNext Supplier"
    },
    {
      "parameters": {
        "resource": "supplier",
        "operation": "create",
        "data": "={\"ten\":\"{{ $json.ten }}\",\"ma\":\"{{ $json.ma }}\", \"dia_chi\": \"{{ $json.dia_chi }}\", \"so_dien_thoai\": \"{{ $json.so_dien_thoai }}\", \"ma_so_thue\": \"{{ $json.ma_so_thue }}\",\"trang_thai\": true,\"stt\":1} "
      },
      "type": "CUSTOM.mbwdmsCustom",
      "typeVersion": 1,
      "position": [
        224,
        272
      ],
      "id": "aa082c1f-5946-4ef4-ad81-4e44613b0d16",
      "name": "Create Supplier in MobiworkDMS",
      "credentials": {
        "MBWDMSCustomApi": {
          "id": "LMRCQovVC82iv3i6",
          "name": "MBW DMS DEV - pp.erpnext.com"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const erpData = $node['Supplier ERPNext'].json ?? [];\nreturn [{\n  json: {\n    names: erpData.map(i => i.supplier_primary_address).filter(Boolean)\n  }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1792,
        272
      ],
      "id": "ebc03a02-5e71-4091-9709-e855b4c4ae5e",
      "name": "Get List Address"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-backup",
  "repo_owner": "MBW-Digital",
  "repo_path": "sinhthaihcm/",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-19T10:26:07.927Z",
      "updatedAt": "2025-10-19T10:26:07.927Z",
      "role": "workflow:owner",
      "workflowId": "9qLvleuv6LtVsIQN",
      "projectId": "NLp1g7OOFWKDmygg"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-03T07:48:49.315Z",
      "updatedAt": "2025-09-03T07:48:49.315Z",
      "id": "HmMyDMy8FTsYQkDm",
      "name": "ERPNext"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-10-19T10:33:43.403Z",
  "versionId": "c5a27d0e-a326-4676-91b2-d9dd29bb6080"
}